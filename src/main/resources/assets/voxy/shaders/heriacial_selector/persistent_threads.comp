#version 460

#define WAVE_SIZE 64
layout(local_size_x=WAVE_SIZE)

#define WorkTask


//or make the shape 4x2x4 which has a local size of 32


//The work queue is a circular queue with collision detection and abortion
struct WorkQueueHeader {
    uint queueSizeBits;
    uint start;
    uint end;
    uint _padd;
};


//Task is a uint32,

//The idea is to use persistent threads + octree culling to recursivly find bottom level sections that satisfy a pixel density requirement
// given a matrix
void main() {
    while (true) {

    }
}



//Idea cull/recuse in a manor of 4x4x4 cube (64 bits), have an existance mask per section so that unnessasery computation isnt done on air subsections
// if a section is fully or partially visible and its aabb does not occupy 1 pixel (or a subset of some specified area/density)
// then enqueue that section as a job
// once a node has reached its tail ending, check if its loaded or not, if not, request it to be loaded
// note that the cpu side can discard sections if they are superceeded by a higher level lod load request etc
